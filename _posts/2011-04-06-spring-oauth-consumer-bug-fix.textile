---
layout: default
title: Fixing Spring's CoreOAuthConsumerSupport
---

*The Background*

For reference the OAuth spec at "tools.ietf.org":http://tools.ietf.org/html/rfc5849 is what I'm basing my research/knowledge on. 

Earlier this year, I started working on a Java(tm) based "Google App Engine":http://appengine.google.com project. During the course of writing that application I came to the realization that I would need to be able to make signed OAuth requests to one or more OAuth protected resources. I came across a number of solutions, but ultimately started using the library provided by the "Codehaus":http://codehaus.org/ spring-security project. The Codehaus project has since been "adopted into SpringSource as an official extension for Spring Security."

During my testing I tried two versions of the spring-security-oauth library with similar results. The maven dependencies are below:

first:

{% highlight xml %}
	<groupId>org.codehaus.spring-security-oauth</groupId>
	<artifactId>spring-security-oauth</artifactId>
	<version>3.19</version>
{% endhighlight %}

second:
commit: be8bbb38834e9c1a68d062610b8741c2ef89da1b of the "springsource git repository":git://git.springsource.org/spring-security/oauth.git

{% highlight xml %}
	<groupId>org.springframework.security.oauth</groupId>
	<artifactId>spring-security-oauth</artifactId>
	<version>1.0.0.BUILD-SNAPSHOT</version>
{% endhighlight %}
<br/>

*The Problem*
One of my project requirements is to make an http POST request where the body that has multiple application/x-www-form-urlencoded parameters. My first attempt was to use OAuthConsumerSupport's configureURLForProtectedAccess method, with a Map containing my extra parameters. This resulted in those parameters correctly being used in calculating the signature base string and subsequently the the oauth_signature parameter, however they were also being included in the Authorization header. From my understanding and research of the oauth protocol, the extra parameter/value pairs need to be included in the signature base string in order to sign the request, but they should be omitted from the Authorization header. The extra parameter/value pairs should then *ONLY* be included in the POST body.  See the following for examples. (newlines added for clarity)

Correct Signature Base String:

{% highlight text %}

POST&https%3A%2F%2Fexample.app.com%2Fresource%2Ftest_post.json \
&date%3D12345%26 \
detail%3DYou%2520have%2520that%2520really%2520important%2520thing%2520to%2520do.%26 \
oauth_consumer_key%3Dexample.app.com%26 \
oauth_nonce%3De986d370-7860-4b6f-b998-357368c05fcd%26 \
oauth_signature_method%3DHMAC-SHA1%26 \
oauth_timestamp%3D1300217494%26 \
oauth_token%3D1%252F-ovI4wOxEBuY_ZDhVYhnEUZUca92uFF_nFGj5GbEwzQ%26 \
oauth_version%3D1.0%26 \
title%3DDon%2527t%2520forget

{% endhighlight %}

p. Expected Authorization header:

{% highlight text %}

Authorization header: Authorization: OAuth oauth_consumer_key="example.app.com", \
oauth_nonce="e224b46c-763e-4a5a-afff-8bb69f03bbc0", \
oauth_signature="xKAI8arTdRik1bdOFq%2FXahWHJIw%3D", \
oauth_signature_method="HMAC-SHA1", \
oauth_timestamp="1300217346", \
oauth_token="1%2F-ovI4wOxEBuY_ZDhVYhnEUZUca92uFF_nFGj5GbEwzQ", \
oauth_version="1.0"

{% endhighlight %}

p. Actual Authorization header:

{% highlight text %}

Authorization: OAuth \
date="12345", \
detail="You%20have%20that%20really%20important%20thing%20to%20do.", \
oauth_consumer_key="example.app.com", \
oauth_nonce="e224b46c-763e-4a5a-afff-8bb69f03bbc0", \
oauth_signature="xKAI8arTdRik1bdOFq%2FXahWHJIw%3D", \
oauth_signature_method="HMAC-SHA1", \
oauth_timestamp="1300217346", \
oauth_token="1%2F-ovI4wOxEBuY_ZDhVYhnEUZUca92uFF_nFGj5GbEwzQ", \
oauth_version="1.0", \
title="Don%27t%20forget"

{% endhighlight %}

The POST body in both cases was written as:

Post body:

{% highlight text %}

date=12345&detail=You%20have%20that%20really%20important%20thing%20to%20do.&title=Don%27t%20forget

{% endhighlight %}

Twitter's OAuth provider does not seem to mind extra parameters included in the Authorization header. However, when attempting to use Google's OAuth provider available in App Engine, the provider throws an OAuthRequestException when it encounters a parameter that it doesn't expect. The google provider seems correct according to the OAuth 1a spec "here":http://tools.ietf.org/html/rfc5849#section-3.5.1.

Reading through the RFC, the extra parameters should be used in the signing of the request, but non "protocol parameters" should be included either in the POST body, or the url query string. My first attempt to fix the issue was to simply exclude parameters from the header in the CoreOAuthConsumerSupport's getAuthorizationHeader method, based on if the parameter name had the prefix "oauth_". However, it is possible that a provider can define it's own extra parameters that are allowed in the Authorization header. e.g. Google's "OAuthGetRequestToken":http://code.google.com/apis/accounts/docs/OAuth_ref.html#RequestToken endpoint requires the extra parameters *scope* and accepts an optional parameter *xoauth_displayname*.
<br/>

*The Fix*
In order to fix the issue I extended CoreOAuthConsumerSupport and overrode the getAuthorizationHeader method. My class adds an extra dependency to the class in the form of a Map bean. The map should contain a list of strings for each OAuth resource that is configured, keyed on that resource's id (the value returned by ProtectedResourceDetails.getId() ). Each string in the list represents the name for an extra parameter that the resource supports in the Authorization header. e.g. Referencing the earlier example, if I configure my resource that connects to google with the name "google" the map would have an entry keyed on the String "google", and it's value would be a list of the strings "scope" and "xoauth_displayname".

The source for the extended class is available on github at "adamvduke/spring_ext":https://github.com/adamvduke/spring_ext
<br/>

